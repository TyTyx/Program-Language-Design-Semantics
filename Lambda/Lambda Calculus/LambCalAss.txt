Lambda Calculus:
PART ONE.

Abbreivations:
kons = λ a d z . z false a d
kar = λ p . p (λ n a d . a)
kdr = λ p . p (λ n a d . d)
null = λ z . z true false false
null? = λ p . p (λ n a d . n)
true = λ a b . a
false = λ a b . b

Prove that the folling properties hold:
1. kar (kons e1 e2) -> e1
2. kdr (kons e1 e2) -> e2
3. null? (kons e1 e2) -> false
4. null? null -> true

--------------------------------------------------------------------------------

1. kar (kons e1 e2) -> e1

# Start inside the brackets.
(kons e1 e2) becomes ((λ a d z . z false a d) e1 e2)

# Using β-reduction. ([a := e1] and [d := e2])
((λ a d z . z false a d) e1 e2) ->β (λ z . z false e1 e2)

# Subbing the beta-reduction back in.
kar (λ z . z false e1 e2)

# Sub in kar.
(λ p . p (λ n a d . a))(λ z . z false e1 e2)

# Using β-reduction. ([p := λ z . z false e1 e2])
(λ p . p (λ n a d . a))(λ z . z false e1 e2)->β (λ z . z false e1 e2)(λ n a d . a)

# Using β-reduction. ([z := λ n a d . a])
(λ z . z false e1 e2)(λ n a d . a) ->β ((λ n a d . a) false e1 e2)

# Using subtitution. ([n := false, a := e1 and d := e2])
# Since the value being retured is a and has the value: e1.

kar (kons e1 e2) -> e1

# Is shown to hold. 

--------------------------------------------------------------------------------

2. kdr (kons e1 e2) -> e2

# Start inside the brackets.
(kons e1 e2) becomes ((λ a d z . z false a d) e1 e2)

# Using β-reduction. ([a := e1] and [d := e2])
((λ a d z . z false a d) e1 e2) ->β (λ z . z false e1 e2)

# Subbing the beta-reduction back in.
kdr (λ z . z false e1 e2)

# Sub in kdr.
(λ p . p (λ n a d . d))(λ z . z false e1 e2)

# Using β-reduction. ([p := λ z . z false e1 e2])
(λ p . p (λ n a d . d))(λ z . z false e1 e2)->β (λ z . z false e1 e2)(λ n a d . d)

# Using β-reduction. ([z := λ n a d . d])
(λ z . z false e1 e2)(λ n a d . d) ->β ((λ n a d . d) false e1 e2)

# Using subtitution. ([n := false, a := e1 and d := e2])
# Since the value being retured is d and has the value: e2.

kdr (kons e1 e2) -> e2

# Is shown to hold.

--------------------------------------------------------------------------------

3. null? (kons e1 e2) -> false

# Start inside the brackets.
(kons e1 e2) becomes ((λ a d z . z false a d) e1 e2)

# Using β-reduction. ([a := e1] and [d := e2])
((λ a d z . z false a d) e1 e2) ->β (λ z . z false e1 e2)

# Subbing the beta-reduction back in.
null? (λ z . z false e1 e2)

# Sub in null?.
(λ p . p (λ n a d . n))(λ z . z false e1 e2)

# Using β-reduction. ([p := λ z . z false e1 e2])
(λ p . p (λ n a d . n))(λ z . z false e1 e2)->β (λ z . z false e1 e2)(λ n a d . n)

# Using β-reduction. ([z := λ n a d . n])
(λ z . z false e1 e2)(λ n a d . n) ->β ((λ n a d . n) false e1 e2)

# Using subtitution. ([n := false, a := e1 and d := e2])
# Since the value being retured is n and has the value: false.

null? (kons e1 e2) -> false

# Is shown to hold.

--------------------------------------------------------------------------------

4. null? null -> true

# Start with null
null becomes (λ z . z true false false)

# Sub expandtion back into original formula.
null? (λ z . z true false false)

# Sub in null?.
(λ p . p (λ n a d . n))(λ z . z true false false)

# Using β-reduction. ([p := λ z . z true false false])
(λ z . z true false false)(λ n a d . n)

# Using β-reduction. ([z := λ n a d . n])
((λ n a d . n) true false false)

# Using subtitution. ([n := true, a := false and d := false])
# Since the value being retured is n and has the value: true.

null? null -> true

# Is shown to hold.

--------------------------------------------------------------------------------

PART TWO:

(λ c . (λ a . (λ d . (λ h . (h (d (a (a (λ z y . y))) (d (a (a (λ f x . x))) (a (a (a (λ z x . x)))))) (h (a (a (λ z y . y))) (a (a (a (λ z x . x))))))) (λ n m . n (d m) (λ z y . y))) (λ n m . n a m)) (λ n z . c (n z) z)) (λ z g x . z (g x))

Easier to read:

(λ c . 
(λ a . 
(λ d . 
(λ h .
	(h 
		(d 
			(a 
				(a 
					(λ z y . y)
				)
			) 
			(d 
				(a 
					(a 
						(λ f x . x)
					)
				) 
				(a 
					(a 
						(a 
							(λ z x . x)
						)
					)
				)
			)
		) 
		(h 
			(a 
				(a 
					(λ z y . y)
				)
			) 
			(a 
				(a 
					(a 
						(λ z x . x)
					)
				)
			)
		)
	)
)
(λ n m . n (d m)
(λ z y . y)))
(λ n m . n a m))
(λ n z . c (n z) z))
(λ z g x . z (g x))

Cleaner representation:

	(λ c . 
	(λ a . 
	(λ d . 
	(λ h . 
	(h (d (a (a (λ z y . y))) 
	(d (a (a (λ f x . x))) 
	(a (a (a (λ z x . x)))))) 
	(h (a (a (λ z y . y))) 
	(a (a (a (λ z x . x))))))) 
	(λ n m . n (d m) (λ z y . y))) 
	(λ n m . n a m)) 
	(λ n z . c (n z) z)) 
	(λ z g x . z (g x))

Solutions
	(λ n m . n (d m) (λ z y . y)))  = (λ n. n (λ z y . y)) = (λ z y . y)
	(λ n m . n a m)) = (λ n . n a) = a
	(λ n z . c (n z) z))  = c
	(λ z g x . z (g x)) = (λ z g. z)

Using above reduces to
	(λ c . 
	(λ a . 
	(λ d . 
	(λ h . 
	(h (d (a (a (λ z y . y))) 
	(d (a (a (λ f x . x))) 
	(a (a (a (λ z x . x)))))) 
	(h (a (a (λ z y . y))) 
	(a (a (a (λ z x . x))))))) 
	(λ z y . y)) 
	 a)
	 c)
	(λ z g. z)

C is an unbound variable so it can be reduced to:
	(λ a . 
	(λ d . 
	(λ h . 
	(h (d (a (a (λ z y . y))) 
	(d (a (a (λ f x . x))) 
	(a (a (a (λ z x . x)))))) 
	(h (a (a (λ z y . y))) 
	(a (a (a (λ z x . x))))))) 
	(λ z y . y)) 
	 a)
	(λ z g. z)


Reduce d to (λ z y . y)
	(λ h . 
	(h (λ z y . y (a (a (λ z y . y))) 
	(λ z y . y(a (a (λ f x . x))) 
	(a (a (a (λ z x . x)))))) 
	(h (a (a (λ z y . y))) 
	(a (a (a (λ z x . x)))))))  
	(λ z g. z)


Alpha renaming 
	(λ h . 
	(h (λ z y . y (a (a (λ z y . y))) 
	((λ z y . y (a (a (λ f x . x))) 
	((λ z x . x))(a (a(λ f x . x)))) 
	(a (a (a (λ z y . y))) 
	(h (a (a (λ z x . x))))))
	(a(a(a(λ zj. j)))))))
	(λ kg.k)

Beta Reduce h to λ k g.k
	(λ k g.k (λ z y . y (a (a (λ z y . y))) 
	((λ z y . y (a (a (λ f x . x))) 
	(a (a (a (λ z y . y))) 
	(λ kg.k (a (a (λ z x . x))))))
	(a(a(a(λ zj. j)))))))

Alpha Renaming
	(λ k g.k (λ z y . y (a (a (λ z y . y))) 
	((λ z y . y (a (a (λ f x . x))) 
	(a (a (a (λ z y . y))) 
	(λ z x . z(a(a(λzj.j)))))
	(a(a(a(λ rs. s))))))))

Beta Reducution
	(λ g(λ z y . y (a (a (λ z y . y))) 
	((λ z y . y (a (a (λ f x . x))) 
	(a (a (a (λ z y . y))) 
	(λ z x . z(a(a(λzj.j)))))
	(a(a(a(λ rs. s))))))))

Beta Reduce g to (λ z x . z(a(a(λzj.j)))(a(a(a(λ rs. s)))))
	(λ z y . y (a (a (λ z y . y))) 
	((λ z y . y (a (a (λ f x . x))) 
	(a (a (a (λ z y . y)))))))

Beta Reduction
	(λ z y . y
	((λ z y . y (a (a (λ f x . x))) 
	(a (a (a (λ z y . y)))))))

Beta Reduction
	(λ z y . y (a (a (λ f x . x)))(a (a (a (λ z y . y)))))))

Beta Reduction
	(λ y . y(a (a (a (λ z y . y)))))

Beta Reduction to Normal form
	(a (a (a (λ z y . y))))
