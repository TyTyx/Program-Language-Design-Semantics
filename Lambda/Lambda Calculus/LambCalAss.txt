Lambda Calculus:
PART ONE.

Abbreivations:
kons = λ a d z . z false a d
kar = λ p . p (λ n a d . a)
kdr = λ p . p (λ n a d . d)
null = λ z . z true false false
null? = λ p . p (λ n a d . n)
true = λ a b . a
false = λ a b . b

Prove that the folling properties hold:
1. kar (kons e1 e2) -> e1
2. kdr (kons e1 e2) -> e2
3. null? (kons e1 e2) -> false
4. null? null -> true

--------------------------------------------------------------------------------

1. kar (kons e1 e2) -> e1

# Start inside the brackets.
(kons e1 e2) becomes ((λ a d z . z false a d) e1 e2)

# Using β-reduction. ([a := e1] and [d := e2])
((λ a d z . z false a d) e1 e2) ->β (λ z . z false e1 e2)

# Subbing the beta-reduction back in.
kar (λ z . z false e1 e2)

# Sub in kar.
(λ p . p (λ n a d . a))(λ z . z false e1 e2)

# Using β-reduction. ([p := λ z . z false e1 e2])
(λ p . p (λ n a d . a))(λ z . z false e1 e2)->β (λ z . z false e1 e2)(λ n a d . a)

# Using β-reduction. ([z := λ n a d . a])
(λ z . z false e1 e2)(λ n a d . a) ->β ((λ n a d . a) false e1 e2)

# Using subtitution. ([n := false, a := e1 and d := e2])
# Since the value being retured is a and has the value: e1.

kar (kons e1 e2) -> e1

# Is shown to hold. 

--------------------------------------------------------------------------------

2. kdr (kons e1 e2) -> e2

# Start inside the brackets.
(kons e1 e2) becomes ((λ a d z . z false a d) e1 e2)

# Using β-reduction. ([a := e1] and [d := e2])
((λ a d z . z false a d) e1 e2) ->β (λ z . z false e1 e2)

# Subbing the beta-reduction back in.
kdr (λ z . z false e1 e2)

# Sub in kdr.
(λ p . p (λ n a d . d))(λ z . z false e1 e2)

# Using β-reduction. ([p := λ z . z false e1 e2])
(λ p . p (λ n a d . d))(λ z . z false e1 e2)->β (λ z . z false e1 e2)(λ n a d . d)

# Using β-reduction. ([z := λ n a d . d])
(λ z . z false e1 e2)(λ n a d . d) ->β ((λ n a d . d) false e1 e2)

# Using subtitution. ([n := false, a := e1 and d := e2])
# Since the value being retured is d and has the value: e2.

kdr (kons e1 e2) -> e2

# Is shown to hold.

--------------------------------------------------------------------------------

3. null? (kons e1 e2) -> false

# Start inside the brackets.
(kons e1 e2) becomes ((λ a d z . z false a d) e1 e2)

# Using β-reduction. ([a := e1] and [d := e2])
((λ a d z . z false a d) e1 e2) ->β (λ z . z false e1 e2)

# Subbing the beta-reduction back in.
null? (λ z . z false e1 e2)

# Sub in null?.
(λ p . p (λ n a d . n))(λ z . z false e1 e2)

# Using β-reduction. ([p := λ z . z false e1 e2])
(λ p . p (λ n a d . n))(λ z . z false e1 e2)->β (λ z . z false e1 e2)(λ n a d . n)

# Using β-reduction. ([z := λ n a d . n])
(λ z . z false e1 e2)(λ n a d . n) ->β ((λ n a d . n) false e1 e2)

# Using subtitution. ([n := false, a := e1 and d := e2])
# Since the value being retured is n and has the value: false.

null? (kons e1 e2) -> false

# Is shown to hold.

--------------------------------------------------------------------------------

4. null? null -> true

# Start with null
null becomes (λ z . z true false false)

# Sub expandtion back into original formula.
null? (λ z . z true false false)

# Sub in null?.
(λ p . p (λ n a d . n))(λ z . z true false false)

# Using β-reduction. ([p := λ z . z true false false])
(λ z . z true false false)(λ n a d . n)

# Using β-reduction. ([z := λ n a d . n])
((λ n a d . n) true false false)

# Using subtitution. ([n := true, a := false and d := false])
# Since the value being retured is n and has the value: true.

null? null -> true

# Is shown to hold.

--------------------------------------------------------------------------------

PART TWO:

(λ c . (λ a . (λ d . (λ h . (h (d (a (a (λ z y . y))) (d (a (a (λ f x . x))) (a (a (a (λ z x . x)))))) (h (a (a (λ z y . y))) (a (a (a (λ z x . x))))))) (λ n m . n (d m) (λ z y . y))) (λ n m . n a m)) (λ n z . c (n z) z)) (λ z g x . z (g x))

# Easier to read:

(λ c .
(λ a .
(λ d .
(λ h .
	(h
		(d
			(a
				(a
					(λ z y . y)
				)
			)
			(d
				(a
					(a
						(λ f x . x)
					)
				)
				(a
					(a
						(a
							(λ z x . x)
						)
					)
				)
			)
		)
		(h
			(a
				(a
					(λ z y . y)
				)
			)
			(a
				(a
					(a
						(λ z x . x)
					)
				)
			)
		)
	)
)
(λ n m . n (d m)
(λ z y . y)))
(λ n m . n a m))
(λ n z . c (n z) z))
(λ z g x . z (g x))

# Put in values where False fit(s):

(λ c .
(λ a .
(λ d .
(λ h .
	(h
		(d
			(a
				(a
					(False)
				)
			)
			(d
				(a
					(a
						(False)
					)
				)
				(a
					(a
						(a
							(False)
						)
					)
				)
			)
		)
		(h
			(a
				(a
					(False)
				)
			)
			(a
				(a
					(a
						(False)
					)
				)
			)
		)
	)
)
(λ n m . n (d m)
(False)))
(λ n m . n a m))
(λ n z . c (n z) z))
(λ z g x . z (g x))

# Substitute λ z g x . z (g x) in for c:

(λ a .
(λ d .
(λ h .
	(h
		(d
			(a
				(a
					(False)
				)
			)
			(d
				(a
					(a
						(False)
					)
				)
				(a
					(a
						(a
							(False)
						)
					)
				)
			)
		)
		(h
			(a
				(a
					(False)
				)
			)
			(a
				(a
					(a
						(False)
					)
				)
			)
		)
	)
)
(λ n m . n (d m)
(False)))
(λ n m . n a m))
(λ z g x . z (g x))

# Rename some vaules where True fit(s):

(λ a .
(λ d .
(λ h .
	(h
		(d
			(a
				(a
					(False)
				)
			)
			(d
				(a
					(a
						(False)
					)
				)
				(a
					(a
						(a
							(False)
						)
					)
				)
			)
		)
		(h
			(a
				(a
					(False)
				)
			)
			(a
				(a
					(a
						(False)
					)
				)
			)
		)
	)
)
(True (d m)
(False)))
(True a m))
(λ z g x . z (g x))

# Substitute a with (TRUE a m):

(λ d .
(λ h .
	(h
		(d
			((True a m)
				((True a m)
					(False)
				)
			)
			(d
				((True a m)
					((True a m)
						(False)
					)
				)
				((True a m)
					((True a m)
						((True a m)
							(False)
						)
					)
				)
			)
		)
		(h
			((True a m)
				((True a m)
					(False)
				)
			)
			((True a m)
				((True a m)
					((True a m)
						(False)
					)
				)
			)
		)
	)
)
(True (d m)
(False)))
(λ z g x . z (g x))

# Substitute (True (d m) (False)) for lambda d:

(λ h .
	(h
		((True (d m) (False)
			((True a m)
				((True a m)
					(False)
				)
			)
			((True (d m) (False)
				((True a m)
					((True a m)
						(False)
					)
				)
				((True a m)
					((True a m)
						((True a m)
							(False)
						)
					)
				)
			)
		)
		(h
			((True a m)
				((True a m)
					(False)
				)
			)
			((True a m)
				((True a m)
					((True a m)
						(False)
					)
				)
			)
		)
	)
)))
(λ z g x . z (g x))

# Substitute (λ z g x . z (g x)) for h:

(λ z g x . z (g x)
	((True (d m) (False)
		((True a m)
			((True a m)
				(False)
			)
		)
		((True (d m) (False)
			((True a m)
				((True a m)
					(False)
				)
			)
			((True a m)
				((True a m)
					((True a m)
						(False)
					)
				)
			)
		))
		(λ z g x . z (g x)
			((True a m)
				((True a m)
					(False)
				)
			)
			((True a m)
				((True a m)
					((True a m)
						(False)
					)
				)
			)
		)
	))
)

# Substitute z (g x):

(λ g x . (g x)
	((True (d m) (False)
		((True a m)
			((True a m)
				(False)
			)
		)
		((True (d m) (False)
			((True a m)
				((True a m)
					(False)
				)
			)
			((True a m)
				((True a m)
					((True a m)
						(False)
					)
				)
			)
		))
		(λ z g x . z (g x)
			((True a m)
				((True a m)
					(False)
				)
			)
			((True a m)
				((True a m)
					((True a m)
						(False)
					)
				)
			)
		)
	))
)

# Substitute ((True (d m) (False)) ((True a m)  ((True a m)  (False)))((True (d m) (False)) ((True a m)  ((True a m)  (False)))((True a m)  ((True a m)  ((True a m)  (False)))))) for g:

(λ x . (g x)
	((λ z g x . z (g x))
		((True a m)
			((True a m)
				(False)
			)
		)
		((True a m)
			((True a m)
				((True a m)
					(False)
				)
			)
		)
	)
)

# Substitute ((λ z g x . z (g x)) ((TRUE a m)  ((TRUE a m)  (FALSE)))((TRUE a m)  ((TRUE a m)  ((TRUE a m)  (FALSE))))) for x:

(g x)

Normal Form = g x

